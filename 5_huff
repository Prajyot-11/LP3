#include <bits/stdc++.h>
using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;

    Node(int d) {
        data = d;
        left = nullptr;
        right = nullptr;
    }
};

class cmp {
public:
    // min heap
    bool operator()(Node* a, Node* b) {
        return a->data > b->data;
    }
};

void traverse(Node* root, vector<string>& ans, string temp) {
    if (root->left == nullptr && root->right == nullptr) {
        ans.push_back(temp);
        return;
    }
    traverse(root->left, ans, temp + '0');
    traverse(root->right, ans, temp + '1');
}

vector<string> huffman(string s, vector<int>& f, int n) {
    priority_queue<Node*, vector<Node*>, cmp> pq;
    for (int i = 0; i < n; i++) {
        Node* temp = new Node(f[i]);
        pq.push(temp);
    }

    while (pq.size() > 1) {
        Node* left = pq.top();
        pq.pop();

        Node* right = pq.top();
        pq.pop();

        Node* newNode = new Node(left->data + right->data);
        newNode->left = left;
        newNode->right = right;
        pq.push(newNode);
    }

    Node* root = pq.top();
    vector<string> ans;
    string temp = "";
    traverse(root, ans, temp);

    return ans; // Return the result
}

int main() {
    string s;
    cin >> s;
    int n = s.length();
    vector<int> f(n);
    for (int i = 0; i < n; i++) {
        cin >> f[i];
    }
    vector<string> ans = huffman(s, f, n);
    for (auto i : ans) {
        cout << i << " ";
    }
    return 0;
}
